
?
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
	
#include <bits/stdc++.h>
 
using namespace std;
 
vector<int> g[100005], grev[100005], topo;
int deg[100005], dist[100005];
long long ans[100005];
string s;
int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    map<char, int> m({{'H', 0}, {'U', 1}, {'E', 2}});
    int t; cin >> t;
    while (t--) {
        int n; cin >> n;
        cin >> s;
        for (int i = 0; i <= n+1; i++) {
            ans[i] = dist[i] = deg[i] = 0;
            g[i].clear();
            grev[i].clear();
        }
 
        for (int i = 0; i < n-1; i++) {
            int x, y; cin >> x >> y;
            x--, y--;
            if ((m[s[x]]+1)%3 ==  m[s[y]]) {
                g[x].push_back(y);
            } else if ((m[s[y]]+1)%3 == m[s[x]]) {
                g[y].push_back(x);
            }
        }
         
        for (int i = 0; i < n; i++) {
            if (s[i] == 'H') {
                g[n].push_back(i);
            } else if (s[i] == 'E') {
                g[i].push_back(n+1);
            }
        }
 
        //topo sort then dp
        for (int i = 0; i <= n+1; i++) {
            for (int c : g[i]) {
                grev[c].push_back(i);
                deg[c]++;
            }
        }
 
        queue<int> q;
        for (int i = 0; i <= n+1; i++) {
            if (deg[i] == 0) {
                q.push(i);
                topo.push_back(i);
                dist[i] = -10000000;
            }
        }
        dist[n] = 0;
 
        topo.clear();
        while (!q.empty()) {
            int u = q.front(); q.pop();
            for (int c : g[u]) {
                deg[c]--;
                if (deg[c] == 0) {
                    q.push(c);
                    topo.push_back(c);
                }
            }
        }
         
        for (int v : topo) {
            dist[v] = 0;
            for (int c : grev[v]) {
                dist[v] = max(dist[c]+1, dist[v]);
            }
        }
 
        ans[n] = 1;
        for (int v : topo) {
            for (int c : grev[v]) {
                if (dist[v] == dist[c]+1) {
                    ans[v] += ans[c];
                }
            }
        }
 
        for (int i = 0; i < dist[n+1]-1; i++) {
            cout << "HUE"[i%3];
        }
        cout << '\n';
        cout << ans[n+1] << '\n';
    }
}
